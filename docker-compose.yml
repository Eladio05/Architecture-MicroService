version: "3.8"

services:
  db:
    container_name: postgres_container
    image: postgres
    restart: always
    hostname: microserviceData
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: test_db
    volumes:
      - ./init_sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app-network

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    networks:
      - app-network

  cloudconfig:
    build:
      context: .
      dockerfile: CloudConfig/Dockerfile
    ports:
      - "8888:8888"
    networks:
      - app-network
    healthcheck:
      test: curl --fail --silent http://cloudconfig:8888/produit/default | grep 'produit' || exit 1
      interval: 10s
      timeout: 2s
      retries: 10

  produit:
    build:
      context: .
      dockerfile: microservice/produit/Dockerfile
    ports:
      - "8095:8095"
    depends_on:
      cloudconfig:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://produit:8094/Produits || exit 1
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://cloudconfig:8888"
    networks:
      - app-network
  
  paiement:
    build:
      context: .
      dockerfile: microservice/Paiement/Dockerfile
    ports:
      - "8096:8096"
    depends_on:
      cloudconfig:
        condition: service_healthy
    
    healthcheck:
        test: curl --fail --silent http://paiement:8094/Paiements || exit 1
        interval: 10s
        timeout: 2s
        retries: 10
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://cloudconfig:8888"
    networks:
      - app-network

  client:
    build:
      context: .
      dockerfile: microservice/client/Dockerfile
    ports:
      - "8097:8097"
    depends_on:
      cloudconfig:
        condition: service_healthy

    healthcheck:
      test: curl --fail --silent http://client:8094/Clients || exit 1
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://cloudconfig:8888"
    networks:
      - app-network
    
  commande:
    build:
      context: .
      dockerfile: microservice/Commande/Dockerfile
    ports:
      - "8098:8098"
    depends_on:
      cloudconfig:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://commande:8094/Commandes || exit 1
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://cloudconfig:8888"
    networks:
      - app-network

  eureka:
    build:
      context: .
      dockerfile: Eureka/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - app-network
  
  zuul:
    build:
      context: .
      dockerfile: Zuul/Dockerfile
    ports:
      - "9005:9005"
    depends_on:
      produit:
        condition: service_healthy
      paiement:
        condition: service_healthy
      client:
        condition: service_healthy
      commande:
        condition: service_healthy
    healthcheck:
      test: curl --fail --silent http://zuul:9005/client/Clients || exit 1
      interval: 10s
      timeout: 2s
      retries: 10
    networks:
      - app-network
    
  angular-app:
    build:
      context: ./front-app  # Assurez-vous que ce chemin pointe vers le dossier contenant votre Dockerfile et nginx.conf
    ports:
      - "4200:80"  # Nginx à l'intérieur du conteneur écoute sur le port 80, mappé sur le port 4201 de l'hôte
    depends_on:
      zuul:
        condition: service_healthy
    networks:
      - app-network


networks:
  app-network:
    driver: bridge
